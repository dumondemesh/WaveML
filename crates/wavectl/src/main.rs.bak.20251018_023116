// WaveML conservative dispatcher main.rs
// This file wires existing cmd_* modules without touching their internals.
use std::process;

use clap::{Parser, Subcommand};

mod cmd_forge;
mod cmd_nf_diff;
mod cmd_forge_explain;
mod cmd_cola;
mod cmd_simulate_swaps;
mod cmd_report_from_graph;

#[derive(Parser)]
#[command(name = "wavectl")]
#[command(about = "WaveML CLI")]
struct Cli {
    #[command(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    Forge(cmd_forge::ForgeArgs),
    NfDiff(cmd_nf_diff::NfDiffArgs),
    ForgeExplain(cmd_forge_explain::ForgeExplainArgs),
    Cola(cmd_cola::ColaArgs),
    SimulateSwaps(cmd_simulate_swaps::SimulateSwapsArgs),
    ReportFromGraph(cmd_report_from_graph::ReportFromGraphArgs),
}

fn main() {
    let cli = Cli::parse();
    let rc = match cli.command {
        Commands::Forge(args) => to_rc(cmd_forge::run_forge(&args)),
        Commands::NfDiff(args) => to_rc(cmd_nf_diff::run_nf_diff(&args)),
        Commands::ForgeExplain(args) => to_rc(cmd_forge_explain::run_forge_explain(&args)),
        Commands::Cola(args) => to_rc(cmd_cola::run_cola(&args)),
        Commands::SimulateSwaps(args) => to_rc(cmd_simulate_swaps::run_simulate_swaps(&args)),
        Commands::ReportFromGraph(args) => to_rc(cmd_report_from_graph::run_report_from_graph(&args)),
    };
    process::exit(rc);
}

fn to_rc(r: Result<(), Box<dyn std::error::Error>>) -> i32 {
    match r {
        Ok(()) => 0,
        Err(e) => {
            eprintln!("{e}");
            1
        }
    }
}
